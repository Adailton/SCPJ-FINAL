// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.appscpj.domain;

import br.com.appscpj.dao.ParteDao;
import br.com.appscpj.domain.Parte;
import br.com.appscpj.domain.ParteDataOnDemand;
import br.com.appscpj.service.ParteService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParteDataOnDemand: @Component;
    
    private Random ParteDataOnDemand.rnd = new SecureRandom();
    
    private List<Parte> ParteDataOnDemand.data;
    
    @Autowired
    ParteService ParteDataOnDemand.parteService;
    
    @Autowired
    ParteDao ParteDataOnDemand.parteDao;
    
    public Parte ParteDataOnDemand.getNewTransientParte(int index) {
        Parte obj = new Parte();
        setBairro(obj, index);
        setCelular(obj, index);
        setCidade(obj, index);
        setComplemento(obj, index);
        setCpf(obj, index);
        setEmail(obj, index);
        setNome(obj, index);
        setNumero(obj, index);
        setRg(obj, index);
        setRua(obj, index);
        setUf(obj, index);
        return obj;
    }
    
    public void ParteDataOnDemand.setBairro(Parte obj, int index) {
        String bairro = "bairro_" + index;
        obj.setBairro(bairro);
    }
    
    public void ParteDataOnDemand.setCelular(Parte obj, int index) {
        String celular = "celular_" + index;
        obj.setCelular(celular);
    }
    
    public void ParteDataOnDemand.setCidade(Parte obj, int index) {
        String cidade = "cidade_" + index;
        obj.setCidade(cidade);
    }
    
    public void ParteDataOnDemand.setComplemento(Parte obj, int index) {
        String complemento = "complemento_" + index;
        obj.setComplemento(complemento);
    }
    
    public void ParteDataOnDemand.setCpf(Parte obj, int index) {
        String cpf = "cpf_" + index;
        obj.setCpf(cpf);
    }
    
    public void ParteDataOnDemand.setEmail(Parte obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void ParteDataOnDemand.setNome(Parte obj, int index) {
        String nome = "nome_" + index;
        obj.setNome(nome);
    }
    
    public void ParteDataOnDemand.setNumero(Parte obj, int index) {
        String numero = "numero_" + index;
        obj.setNumero(numero);
    }
    
    public void ParteDataOnDemand.setRg(Parte obj, int index) {
        String rg = "rg_" + index;
        obj.setRg(rg);
    }
    
    public void ParteDataOnDemand.setRua(Parte obj, int index) {
        String rua = "rua_" + index;
        obj.setRua(rua);
    }
    
    public void ParteDataOnDemand.setUf(Parte obj, int index) {
        String uf = "uf_" + index;
        obj.setUf(uf);
    }
    
    public Parte ParteDataOnDemand.getSpecificParte(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Parte obj = data.get(index);
        Long id = obj.getId();
        return parteService.findParte(id);
    }
    
    public Parte ParteDataOnDemand.getRandomParte() {
        init();
        Parte obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return parteService.findParte(id);
    }
    
    public boolean ParteDataOnDemand.modifyParte(Parte obj) {
        return false;
    }
    
    public void ParteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = parteService.findParteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Parte' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Parte>();
        for (int i = 0; i < 10; i++) {
            Parte obj = getNewTransientParte(i);
            try {
                parteService.saveParte(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            parteDao.flush();
            data.add(obj);
        }
    }
    
}
