// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.appscpj.domain;

import br.com.appscpj.dao.AdvogadoDao;
import br.com.appscpj.domain.Advogado;
import br.com.appscpj.domain.AdvogadoDataOnDemand;
import br.com.appscpj.service.AdvogadoService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AdvogadoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AdvogadoDataOnDemand: @Component;
    
    private Random AdvogadoDataOnDemand.rnd = new SecureRandom();
    
    private List<Advogado> AdvogadoDataOnDemand.data;
    
    @Autowired
    AdvogadoService AdvogadoDataOnDemand.advogadoService;
    
    @Autowired
    AdvogadoDao AdvogadoDataOnDemand.advogadoDao;
    
    public Advogado AdvogadoDataOnDemand.getNewTransientAdvogado(int index) {
        Advogado obj = new Advogado();
        setBairro(obj, index);
        setCelular(obj, index);
        setCidade(obj, index);
        setComplemento(obj, index);
        setEmail(obj, index);
        setNome(obj, index);
        setNumero(obj, index);
        setOab(obj, index);
        setRua(obj, index);
        setUf(obj, index);
        return obj;
    }
    
    public void AdvogadoDataOnDemand.setBairro(Advogado obj, int index) {
        String bairro = "bairro_" + index;
        obj.setBairro(bairro);
    }
    
    public void AdvogadoDataOnDemand.setCelular(Advogado obj, int index) {
        String celular = "celular_" + index;
        obj.setCelular(celular);
    }
    
    public void AdvogadoDataOnDemand.setCidade(Advogado obj, int index) {
        String cidade = "cidade_" + index;
        obj.setCidade(cidade);
    }
    
    public void AdvogadoDataOnDemand.setComplemento(Advogado obj, int index) {
        String complemento = "complemento_" + index;
        obj.setComplemento(complemento);
    }
    
    public void AdvogadoDataOnDemand.setEmail(Advogado obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void AdvogadoDataOnDemand.setNome(Advogado obj, int index) {
        String nome = "nome_" + index;
        obj.setNome(nome);
    }
    
    public void AdvogadoDataOnDemand.setNumero(Advogado obj, int index) {
        String numero = "numero_" + index;
        obj.setNumero(numero);
    }
    
    public void AdvogadoDataOnDemand.setOab(Advogado obj, int index) {
        String oab = "oab_" + index;
        obj.setOab(oab);
    }
    
    public void AdvogadoDataOnDemand.setRua(Advogado obj, int index) {
        String rua = "rua_" + index;
        obj.setRua(rua);
    }
    
    public void AdvogadoDataOnDemand.setUf(Advogado obj, int index) {
        String uf = "uf_" + index;
        obj.setUf(uf);
    }
    
    public Advogado AdvogadoDataOnDemand.getSpecificAdvogado(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Advogado obj = data.get(index);
        Long id = obj.getId();
        return advogadoService.findAdvogado(id);
    }
    
    public Advogado AdvogadoDataOnDemand.getRandomAdvogado() {
        init();
        Advogado obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return advogadoService.findAdvogado(id);
    }
    
    public boolean AdvogadoDataOnDemand.modifyAdvogado(Advogado obj) {
        return false;
    }
    
    public void AdvogadoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = advogadoService.findAdvogadoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Advogado' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Advogado>();
        for (int i = 0; i < 10; i++) {
            Advogado obj = getNewTransientAdvogado(i);
            try {
                advogadoService.saveAdvogado(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            advogadoDao.flush();
            data.add(obj);
        }
    }
    
}
